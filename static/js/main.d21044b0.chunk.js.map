{"version":3,"sources":["components/Pagination.tsx","App.tsx","index.tsx"],"names":["Pagination","total","setPageOptions","useState","Array","from","length","_","i","items","setItems","useSearchParams","searchParams","setSearchParams","queryPerPage","get","queryPageNumber","indexOfLastPost","indexOfFirstPost","currentPosts","slice","getVisiblePages","totalPages","Math","ceil","startIndex","endIndex","splice","concat","visiblePages","handleChange","e","target","name","value","perPage","page","toString","prev","useEffect","set","htmlFor","type","onChange","id","map","item","className","classNames","onClick","number","active","disabled","App","pageOptions","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d21044b0.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport {\n  Dispatch,\n  SetStateAction,\n  useState,\n  useEffect,\n} from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport './Pagination.scss';\n\ntype Props = {\n  total: number;\n  setPageOptions: Dispatch<SetStateAction<PageOpton>>\n};\n\ntype PageOpton = {\n  total: number\n};\n\nconst Pagination: React.FC<Props> = ({\n  total,\n  setPageOptions,\n}) => {\n  const [items, setItems] = useState(\n    Array.from({ length: total }, (_, i) => i + 1),\n  );\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryPerPage = searchParams.get('perPage') || 5;\n  const queryPageNumber = searchParams.get('page') || 1;\n  const indexOfLastPost = +queryPageNumber * +queryPerPage;\n  const indexOfFirstPost = indexOfLastPost - +queryPerPage;\n  const currentPosts = items.slice(indexOfFirstPost, indexOfLastPost);\n\n  function getVisiblePages() {\n    const dots = '...';\n    const totalPages = Array.from({\n      length: Math.ceil(total / +queryPerPage),\n    }, (_, i) => i + 1);\n\n    if (totalPages.length < 5) {\n      return totalPages;\n    }\n\n    const startIndex: (number | string)[] = totalPages\n      .slice(0, +queryPageNumber - 1);\n    const endIndex: (number | string)[] = totalPages.slice(+queryPageNumber);\n    const result: (number | string)[] = [];\n\n    if (startIndex.length > 2) {\n      startIndex.splice(1, startIndex.length - 2, dots);\n    }\n\n    if (endIndex.length > 2) {\n      endIndex.splice(1, endIndex.length - 2, dots);\n    }\n\n    return result.concat(startIndex, queryPageNumber, endIndex);\n  }\n\n  const visiblePages = getVisiblePages();\n\n  useEffect(() => {\n    setItems(Array.from({ length: total }, (_, i) => i + 1));\n    getVisiblePages();\n  }, [total]);\n\n  useEffect(() => {\n    const perPage = Math.ceil(total / +queryPerPage);\n\n    if (queryPageNumber > perPage) {\n      searchParams.set('page', perPage.toString());\n      setSearchParams(searchParams);\n    }\n  }, [queryPerPage, total]);\n\n  function handleChange(\n    e: React.ChangeEvent<HTMLInputElement & HTMLSelectElement>,\n  ) {\n    const { name, value } = e.target;\n    const query = value;\n\n    if (name === 'perPage') {\n      setSearchParams({ perPage: query, page: queryPageNumber.toString() });\n      setPageOptions(prev => (\n        { ...prev, perPage: +queryPerPage }\n      ));\n    }\n\n    setPageOptions(prev => (\n      { ...prev, [name]: +value }\n    ));\n  }\n\n  return (\n    <div>\n      <label htmlFor=\"total\">Total</label>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        value={total}\n        name=\"total\"\n      />\n      <label htmlFor=\"perPage\">Items per page</label>\n      <select\n        name=\"perPage\"\n        id=\"perPage\"\n        value={+queryPerPage}\n        onChange={handleChange}\n      >\n        <option value=\"3\">\n          3\n        </option>\n        <option value=\"5\">\n          5\n        </option>\n        <option value=\"10\">10</option>\n        <option value=\"20\">20</option>\n      </select>\n      {currentPosts.map(item => (\n        <ul className=\"list-group\">\n          <li key={item} className=\"list-group-item\">{item}</li>\n        </ul>\n      ))}\n      <ul className=\"pagination mt-5\">\n        <li className={`page-item ${+queryPageNumber - 1 < 1 ? 'disabled' : ''}`}>\n          <p\n            aria-hidden=\"true\"\n            className={classNames(\n              'page-link',\n            )}\n            onClick={() => {\n              setSearchParams({\n                perPage: queryPerPage.toString(),\n                page: (+queryPageNumber - 1).toString(),\n              });\n            }}\n          >\n            <span aria-hidden=\"true\">&laquo;</span>\n          </p>\n        </li>\n        {visiblePages.map(number => {\n          return (\n            <li\n              key={number}\n              className={classNames(\n                'page-item clicable',\n                {\n                  active: +number === +queryPageNumber,\n                  disabled: number === '...',\n                },\n              )}\n            >\n              <p\n                aria-hidden=\"true\"\n                className={classNames(\n                  'page-link',\n                )}\n                onClick={() => {\n                  setSearchParams({\n                    perPage: queryPerPage.toString(),\n                    page: number.toString(),\n                  });\n                }}\n              >\n                {number}\n              </p>\n            </li>\n          );\n        })}\n        <li className={`page-item ${+queryPageNumber + 1 > visiblePages.length ? 'disabled' : ''}`}>\n          <p\n            aria-hidden=\"true\"\n            className={classNames(\n              'page-link',\n            )}\n            onClick={() => {\n              setSearchParams({\n                perPage: queryPerPage.toString(),\n                page: (+queryPageNumber + 1).toString(),\n              });\n            }}\n          >\n            <span aria-hidden=\"true\">&raquo;</span>\n          </p>\n        </li>\n\n        <h2>\n          {`${indexOfFirstPost + 1} - ${indexOfLastPost < total ? indexOfLastPost : total} of ${total}`}\n        </h2>\n      </ul>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React, { useState } from 'react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport './App.css';\nimport Pagination from './components/Pagination';\n\nconst App: React.FC = () => {\n  const [pageOptions, setPageOptions] = useState({\n    total: 42,\n  });\n\n  return (\n    <BrowserRouter>\n      <div className=\"container\">\n        <h1 className=\"text-primary text-center mb-3\">Pagination</h1>\n        <Routes>\n          <Route\n            path=\"/react_pagination\"\n            element={(\n              <Pagination\n                total={pageOptions.total}\n                setPageOptions={setPageOptions}\n              />\n            )}\n          />\n          <Route\n            path=\"/:tabId/page=:perTab\"\n            element={(\n              <Pagination\n                total={pageOptions.total}\n                setPageOptions={setPageOptions}\n              />\n            )}\n          />\n        </Routes>\n      </div>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}